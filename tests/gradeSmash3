#--------------------------------------------------------------------------------
#
# gradeSmash3 -- Grades the CS253 smash3 project
#
# Usage
#   gradeSmash3 studentDirectory [...]
#
# Exits with number of lost points
#
# Notes/Assumptions
# + Assumes the project is submitted using the onyx submit command, not backpack.
# + Grades the project in named student directories
#
#-------------------------------------------------------------------------------


#Configuration:  Define some values that might change from semester-to-semester
MAXPOINTS=70
LETTERGRADE=7
HALFLETTERGRADE=3
EXE=smash
VALOUT=valgrind.txt

#Initialization:  Define the grading results log file (resides in each student folder)
GRADINGTXT=grading.txt
studentGrades=grades.csv
PROGRAM=smash
score=$MAXPOINTS
TMPFILE=/tmp/"$USER""$$"
TEST0=`pwd`/testMakefile
TEST1=`pwd`/testSmash1
TEST2=`pwd`/testSmash2
BIGIN=`pwd`/big.in
TESTIN=`pwd`/test.in
LONGHISTORY=`pwd`/longHistory.in
BASICHISTORY=`pwd`/basicHistory.in
TESTCOMMANDS=testCommands
TESTDIR=testDir.tmp
TESTEXITSTATUS=`pwd`/testExitStatus.in

#The timeout and valgrind utilities are available on linux but not on standard macOS
TIMEOUT="timeout 5s"
#TIMEOUT=
#VALGRIND=echo
VALGRIND=valgrind






#--------------------------------------------------------------------------------
# Define function to log a message to the dest file.
# Usage:  logMsg $LINENO messageText
#--------------------------------------------------------------------------------
logMsg() {
  echo "[$1] " "$2" "Score=$score" >>$GRADINGTXT
}




#---------------------------------------------------------------------------------
# Define function to deduct points if the specified file exists
# Usage:  deductFileExists $LINENO filename nPoints
#---------------------------------------------------------------------------------
deductFileExists() {
  if [ -e "$2" ]; then
    deductPoints $3
    logMsg "$1" "ERROR:  Unexpected file $2.  score-=$3 points"
  fi
}



#--------------------------------------------------------------------------------
# Define function to deduct points if the specified file is missing
# Usage:  deductFileMissing $LINENO filename nPoints
#--------------------------------------------------------------------------------
deductFileMissing() {
   if [ -f "$2" ]; then
     deductPoints $3
     logMsg "$1" "ERROR:  Missing file $2.  score==$3 points"
   fi
}



#---------------------------------------------------------------------------------
# Define function to deduct points if regexp is missing from string.  Ignores
# case.
# Usage:  deductMissingString $LINENO string regexp nPoints
#---------------------------------------------------------------------------------
deductMissingString() {
   if ! echo "$2" | grep -i -q "$3" ; then
      deductPoints $4
      logMsg "$1" " ERROR:  Substring "$3" missing in string, "$2".  score-=$4 points"
   fi
}




#---------------------------------------------------------------------------------
# Define function to deduct points if regexp appears in string.  Ignores
# case.
# Usage:  deductMissingString $LINENO string regexp nPoints
#---------------------------------------------------------------------------------
deductString() {
   if echo "$2" | grep -i -q "$3" ; then
      deductPoints $4
      logMsg "$1" " ERROR:  Regexp "$3" appears in string, "$2".  score-=$4 points"
   fi
}





#---------------------------------------------------------------------------------
# Define function to deduct points if regexp is found in a specified file
# Usage:  deductGrep $LINENO regexp filename nPoints
#---------------------------------------------------------------------------------
deductGrep() {
  output=$(grep -i "$2" "$3")
  if [ "$?" == 0 ]; then
    deductPoints $1 $4
    logMsg "$1" " ERROR:  Found unexpected regexp '$2' in '$3'."
  fi
}






#---------------------------------------------------------------------------------
# Define function to deduct points if regexp is missing from a specified file
# Usage:  deductnGrep $LINENO regexp filename nPoints
#---------------------------------------------------------------------------------
deductnGrep() {
  output=$(grep -i "$2" "$3")
  if [ "$?" != 0 ]; then
    deductPoints $4
    logMsg "$1" "ERROR:  Could not grep $2 in $3"
  fi
}






#---------------------------------------------------------------------------------
# Define function to deduct points from score
# Usage:  deductPoints nPoints
#---------------------------------------------------------------------------------
deductPoints() {
  let score-=$1
  if [ $score -lt 0 ]; then
    let score=0
  fi
}




#--------------------------------------------------------------------------------
# Grading starts here
#--------------------------------------------------------------------------------

#Clean previous grading results
rm -f $GRADINGTXT &>/dev/null

#Check for instructor error (missing files)
echo "Initializing..." >$studentGrades
if [ ! -x $TEST0 ]; then
   logMsg "$LINENO" "FATAL:  Missing executable file, $TEST0"
   exit -1
fi


#Loop executed once for each student's submitted directory
for d in $*; do

#-------Each student starts out with full credit for the project
        score=$MAXPOINTS

#-------Enter this student's directory, $d, and delete legacy grading results
	pushd . &>/dev/null
	cd "$d" &>/dev/null
	rm -f $GRADINGTXT &>/dev/null

#-------Log a message into their grading results file before something goes horribly wrong
        logMsg $LINENO "----- Start grading with $0"

#-------Deduct points for submitting an object file or executable program
        deductFileExists $LINENO $PROGRAM.o $HALFLETTERGRADE
	deductFileExists $LINENO $PROGRAM   $HALFLETTERGRADE

#-------Manually clean the student project's directory
        rm -f $PROGRAM $PROGRAM.o *.a >/dev/null 2>&1

#-------Verify that we have a README file
        logMsg  $LINENO "Checking the README.md file"
	ls *README*
	if [ "$?" != 0 ]; then
	  deductPoints $HALFLETTERGRADE
	  logMsg $LINENO "ERROR:  README.md not found"
	fi

#-------Test build default target
	logMsg $LINENO "Running make"
        result=$( make 2>&1 )

#-------Verify make actually built the executable program
        logMsg $LINENO "Grading make default target"
        if [ ! -x $EXE ]; then
          logMsg $LINENO "FATAL:  make did not build $EXE"
          deductPoints $LINENO $MAXPOINTS
	  continue
        fi

#-------Verify make ran without warnings
        logMsg $LINENO "Grading make warnings"
        deductString $LINENO "$result" "warning" $HALFLETTERGRADE

#-------Verify make ran without errors
        logMsg $LINENO "Grading make errors"
        deductString $LINENO "$results" "error" $LETTERGRADE

#-------Verify configuration of CFLAGS with -Wall and -std=c99
        logMsg $LINENO "Grading configuration of Makefile with CFLAGS = -Wall -std=c99"
        deductnGrep $LINENO "CFLAGS" Makefile $HALFLETTERGRADE
        deductnGrep $LINENO "Wall"   Makefile $HALFLETTERGRADE
        deductnGrep $LINENO "c99"    Makefile $HALFLETTERGRADE

#-------Verify make clean removes binary build artifacts
        logMsg $LINENO "Grading make clean"
        make clean
        result=$( ls *.o *.a 2>&1 )
        deductMissingString $LINENO "$result" "No such file" $HALFLETTERGRADE
        result=$( ls $EXE 2>&1 )
        deductMissingString $LINENO "$result" "No such file" $HALFLETTERGRADE

#-------Verify make does nothing if the product is already built (see man make for explanation of -q option)
        logMsg $LINENO "Grading make does nothing when product is already up-to-date"
        make
        make -q
        if [ "$?" -ne "0" ]; then
          logMsg $LINENO "ERROR:  Make should do nothing when product is alredy up-to-date"
          deductPoints $LINENO $HALFLETTERGRADE
        fi

#-------Smash should exit normally given an exit command
        logMsg $LINENO "Grading exit command"
        echo exit | $TIMEOUT $EXE 2>/dev/null
        if [ $? -ne 0 ]; then
          logMsg $LINENO "ERROR:  smash did not exit normally"
          deductPoints $LINENO $LETTERGRADE
        fi

#-------Smash should emit an error message to stderr when asked to cd non-existing directory
        logMsg $LINENO "Grading cd non-existing-directory"
        echo "cd non-existing-directory" | $TIMEOUT $EXE 2>$TMPFILE
        deductnGrep $LINENO "No such file or directory" $TMPFILE $HALFLETTERGRADE

#-------Smash should be able to cd into an existing directory without an error
        logMsg $LINENO "Grading cd existing-directory"
        mkdir existing-directory
        echo "cd existing-directory" | $TIMEOUT $EXE 2>$TMPFILE
        deductGrep $LINENO "No such" $TMPFILE $HALFLETTERGRADE
        rmdir existing-directory

#-------Exercise the history command
        logMsg $LINENO "Grading basicHistory features"
        $TIMEOUT $EXE <$BASICHISTORY >$TMPFILE
        deductnGrep $LINENO "1.*ls"        $TMPFILE $HALFLETTERGRADE
        deductnGrep $LINENO "2.*cd *foo"    $TMPFILE $HALFLETTERGRADE
        deductnGrep $LINENO "\[.*1.*\] *cd" $TMPFILE $HALFLETTERGRADE
        deductnGrep $LINENO "4.*history"    $TMPFILE $HALFLETTERGRADE

#-------Grade wrap-around history (Command #11)
	logMsg $LINENO "Grading long history using $LONGHISTORY"
	$TIMEOUT smash <$LONGHISTORY >$TMPFILE
	deductnGrep $LINENO "11.*theLastLsCommand" $TMPFILE $HALFLETTERGRADE

#-------Exercise a simple, external command
        logMsg $LINENO "Grading execution of a simple, external command"
        echo "cp $TESTCOMMANDS.in $TESTCOMMANDS.out" | $TIMEOUT $EXE >$TMPFILE
        deductFileMissing $LINENO $TESTCOMMANDS.out $LETTERGRADE
	sleep 1    #Allow plenty of time for cp command to exit before continuing 
	ps | fgrep -v fgrep | fgrep cp
	if [ "$?" != 1 ]; then
	   deductPoints $HALFLETTERGRADE
	   logMsg $LINENO "ERROR:  The external command, cp, did not exit.  Zombie?"
	fi

#-------Verify that the cd command changes smash's current working directory
        logMsg $LINENO "Grading the cd command changes smash current working directory"
	$TIMEOUT $EXE <$TESTCOMMANDS.in
	deductFileMissing $LINENO $TESTDIR/$TESTCOMMANDS.out
	ps | fgrep -v fgrep | fgrep smash
	if [ "$?" != 1 ]; then
	   deductPoints $HALFLETTERGRADE
	   logMsg $LINENO "ERROR:  The smash process did not exit"
	fi
	rm -fr $TESTDIR

#-------Verify that smash is recording exit status of external commands in history
        logMsg $LINENO "Grading exit status of external command recorded in history"
	result=$( $TIMEOUT $EXE <$TESTEXITSTATUS )
	deductMissingString $LINENO "$result" "1.*1.*fgrep.*smash" $HALFLETTERGRADE
	

#-------Check for problems using valgrind
	logMsg $LINENO "Running valgrind $EXE"
	$TIMEOUT cat $TESTIN $BIGIN | $VALGRIND --leak-check=full --show-leak-kinds=all --child-silent-after-fork=yes $EXE 2>&1 >$VALOUT
	deductGrep $LINENO "Definitely *lost" $VALOUT $HALFLETTERGRADE

#-------Manual clean-up following grading
	rm -f $PROGRAM.o $PROGRAM >>/dev/null 2>&1

#-------Record this student's score to stdout and their grading log
	if [ "$score" -lt "0" ]; then
	   let score=0
	fi
        echo $d $score
	logMsg $LINENO "FinalScore=$score "

#-------Manually clean and exit this student's project directory
        rm -f $EXE *.o *.a
	popd &>/dev/null

#-------Record this student's score in the top-level file
	echo "$d, $score" >>$studentGrades
	
done
